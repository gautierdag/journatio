{"version":3,"sources":["Components/Calculator/Calculator.tsx","Components/App/App.tsx","reportWebVitals.ts","index.tsx"],"names":["gcd","a","b","Calculator","props","state","value","results","error","handleChange","bind","event","input","num","parseInt","target","test","this","setState","result_percentages","greatestCommonFactor","findBaseRatio","ratios","val","i","preCalculateRatios","keys","Object","sort","bigger","length","toString","push","parseFloat","toFixed","onChange","type","autoFocus","size","maxLength","style","color","React","Component","App","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f745214d.chunk.js","sourcesContent":["import React from 'react';\nimport './Calculator.css';\n\nfunction validateDigits(input: string) {\n  return /^[1-9]\\d{0,2}$/.test(input);\n}\n\nfunction preCalculateRatios() {\n  const ratios: any = {};\n  for (let val of [10, 9, 8, 7, 6, 5, 4, 3, 2]) {\n    for (let i = 1; i < val; i++) {\n      let ratio = i / val;\n      ratios[ratio] = `${i} in ${val}`;\n    }\n  }\n  return ratios;\n}\n\nfunction gcd(a: number, b: number): number {\n  if (!b) {\n    return a;\n  }\n  return gcd(b, a % b);\n}\n\nfunction findBaseRatio(num: number, b = true) {\n  let greatestCommonFactor = gcd(num, 100);\n  if (greatestCommonFactor > 1) {\n    return `${num / greatestCommonFactor} in ${100 / greatestCommonFactor}`;\n  } else {\n    return `${num} in ${100}`;\n  }\n}\n\nclass Calculator extends React.Component<\n  {},\n  { value: number; results: string[]; error: string }\n> {\n  constructor(props: any) {\n    super(props);\n    this.state = { value: 100, results: ['1 in 1'], error: '' };\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  handleChange(event: any) {\n    let num = parseInt(event.target.value);\n    if (!validateDigits(event.target.value) || num > 100 || num < 0) {\n      this.setState({\n        value: event.target.value,\n        results: [],\n        error: 'Invalid Value.'\n      });\n    } else {\n      let baseRatio = findBaseRatio(num, false);\n\n      const result_percentages = [baseRatio];\n      const ratios = preCalculateRatios();\n      const keys = Object.keys(ratios).sort();\n\n      let bigger = true;\n      for (let i = 0; i < keys.length; i++) {\n        if (keys[i] === (num / 100).toString()) {\n          if (i < keys.length - 1) {\n            result_percentages.push(\n              `Less than ${ratios[keys[i + 1]]} (${(\n                parseFloat(keys[i + 1]) * 100\n              ).toFixed(1)}%)`\n            );\n          }\n          if (i > 0) {\n            result_percentages.push(\n              `More than ${ratios[keys[i - 1]]} (${(\n                parseFloat(keys[i - 1]) * 100\n              ).toFixed(1)}%)`\n            );\n          }\n          bigger = false;\n        }\n        if (parseFloat(keys[i]) > num / 100 && bigger) {\n          result_percentages.push(\n            `Less than ${ratios[keys[i]]} (${(\n              parseFloat(keys[i]) * 100\n            ).toFixed(1)}%)`\n          );\n\n          if (i > 0) {\n            result_percentages.push(\n              `More than ${ratios[keys[i - 1]]} (${(\n                parseFloat(keys[i - 1]) * 100\n              ).toFixed(1)}%)`\n            );\n          }\n          bigger = false;\n        }\n      }\n\n      this.setState({\n        value: event.target.value,\n        results: result_percentages,\n        error: ''\n      });\n    }\n  }\n\n  render() {\n    const result_percentages = [];\n\n    for (const value of this.state.results) {\n      result_percentages.push(\n        <div>\n          {value}\n          <br />\n        </div>\n      );\n    }\n\n    return (\n      <div>\n        <form>\n          <input\n            value={this.state.value}\n            onChange={this.handleChange}\n            type=\"text\"\n            autoFocus={true}\n            size={3}\n            maxLength={3}\n          />{' '}\n          %\n        </form>\n        <p>\n          <span style={{ color: 'red' }}>{this.state.error}</span>\n          {result_percentages}\n        </p>\n      </div>\n    );\n  }\n}\n\nexport default Calculator;\n","import React from 'react';\nimport './App.css';\n\nimport Calculator from '../Calculator/Calculator';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <p>This calculator spits out best estimated ratio for publishing.</p>\n        <p>Enter percentage that you want to convert:</p>\n        <Calculator />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);  \n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n}\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Components/App/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}